use std::collections::HashMap;

use crate::mix;

pub struct OpCode {
  value: u8,
  default_fs: u8,
}

lazy_static! {
  pub static ref OP_CODES: HashMap<&'static str, OpCode> = {
    let mut m = HashMap::new();
    m.insert("NOP", OpCode {value: mix::op_codes::NOP, default_fs: 0});
    m.insert("ADD", OpCode  {value: mix::op_codes::ADD, default_fs: 5});
    m.insert("SUB", OpCode  {value: mix::op_codes::SUB, default_fs: 5});
    m.insert("MUL", OpCode  {value: mix::op_codes::MUL, default_fs: 5});
    m.insert("DIV", OpCode  {value: mix::op_codes::DIV, default_fs: 5});
    m.insert("NUM", OpCode  {value: mix::op_codes::NUM, default_fs: 0});
    m.insert("CHAR", OpCode {value: mix::op_codes::CHAR, default_fs: 1});
    m.insert("HLT", OpCode  {value: mix::op_codes::HLT, default_fs: 2});
    // m.insert("SLA", OpCode  {value: mix::op_codes::SLA, default_fs: 0});
    // m.insert("SRA", OpCode  {value: mix::op_codes::SRA, default_fs: 1});
    // m.insert("SLAX", OpCode {value: mix::op_codes::SLAX, default_fs: 2});
    // m.insert("SRAX", OpCode {value: mix::op_codes::SRAX, default_fs: 3});
    // m.insert("SLC", OpCode  {value: mix::op_codes::SLC, default_fs: 4});
    // m.insert("SRC", OpCode  {value: mix::op_codes::SRC, default_fs: 5});
    // m.insert("MOVE", OpCode {value: mix::op_codes::MOVE, default_fs: 5});
    m.insert("LDA", OpCode  {value: mix::op_codes::LDA, default_fs: 5});
    m.insert("LD1", OpCode  {value: mix::op_codes::LD1, default_fs: 5});
    m.insert("LD2", OpCode  {value: mix::op_codes::LD2, default_fs: 5});
    m.insert("LD3", OpCode  {value: mix::op_codes::LD3, default_fs: 5});
    m.insert("LD4", OpCode  {value: mix::op_codes::LD4, default_fs: 5});
    m.insert("LD5", OpCode  {value: mix::op_codes::LD5, default_fs: 5});
    m.insert("LD6", OpCode  {value: mix::op_codes::LD6, default_fs: 5});
    m.insert("LDX", OpCode  {value: mix::op_codes::LDX, default_fs: 5});
    m.insert("LDAN", OpCode {value: mix::op_codes::LDAN, default_fs: 5});
    m.insert("LD1N", OpCode {value: mix::op_codes::LD1N, default_fs: 5});
    m.insert("LD2N", OpCode {value: mix::op_codes::LD2N, default_fs: 5});
    m.insert("LD3N", OpCode {value: mix::op_codes::LD3N, default_fs: 5});
    m.insert("LD4N", OpCode {value: mix::op_codes::LD4N, default_fs: 5});
    m.insert("LD5N", OpCode {value: mix::op_codes::LD5N, default_fs: 5});
    m.insert("LD6N", OpCode {value: mix::op_codes::LD6N, default_fs: 5});
    m.insert("LDXN", OpCode {value: mix::op_codes::LDXN, default_fs: 5});
    m.insert("STA", OpCode  {value: mix::op_codes::STA, default_fs: 5});
    m.insert("ST1", OpCode  {value: mix::op_codes::ST1, default_fs: 5});
    m.insert("ST2", OpCode  {value: mix::op_codes::ST2, default_fs: 5});
    m.insert("ST3", OpCode  {value: mix::op_codes::ST3, default_fs: 5});
    m.insert("ST4", OpCode  {value: mix::op_codes::ST4, default_fs: 5});
    m.insert("ST5", OpCode  {value: mix::op_codes::ST5, default_fs: 5});
    m.insert("ST6", OpCode  {value: mix::op_codes::ST6, default_fs: 5});
    m.insert("STX", OpCode  {value: mix::op_codes::STX, default_fs: 5});
    m.insert("STJ", OpCode  {value: mix::op_codes::STJ, default_fs: 2});
    m.insert("STZ", OpCode  {value: mix::op_codes::STZ, default_fs: 5});
    m.insert("JBUS", OpCode {value: mix::op_codes::JBUS, default_fs: 0});
    m.insert("IOC", OpCode  {value: mix::op_codes::IOC, default_fs: 0});
    m.insert("IN", OpCode   {value: mix::op_codes::IN, default_fs: 0});
    m.insert("OUT", OpCode  {value: mix::op_codes::OUT, default_fs: 0});
    m.insert("JRED", OpCode {value: mix::op_codes::JRED, default_fs: 0});
    m.insert("JMP", OpCode  {value: mix::op_codes::JMP, default_fs: 0});
    m.insert("JSJ", OpCode  {value: mix::op_codes::JSJ, default_fs: 1});
    m.insert("JOV", OpCode  {value: mix::op_codes::JOV, default_fs: 2});
    m.insert("JNOV", OpCode {value: mix::op_codes::JNOV, default_fs: 3});
    m.insert("JL", OpCode   {value: mix::op_codes::JL, default_fs: 4});
    m.insert("JE", OpCode   {value: mix::op_codes::JE, default_fs: 5});
    m.insert("JG", OpCode   {value: mix::op_codes::JG, default_fs: 6});
    m.insert("JGE", OpCode  {value: mix::op_codes::JGE, default_fs: 7});
    m.insert("JNE", OpCode  {value: mix::op_codes::JNE, default_fs: 8});
    m.insert("JLE", OpCode  {value: mix::op_codes::JLE, default_fs: 9});
    m.insert("JAN", OpCode  {value: mix::op_codes::JAN, default_fs: 0});
    m.insert("JAZ", OpCode  {value: mix::op_codes::JAZ, default_fs: 1});
    m.insert("JAP", OpCode  {value: mix::op_codes::JAP, default_fs: 2});
    m.insert("JANN", OpCode {value: mix::op_codes::JANN, default_fs: 3});
    m.insert("JANZ", OpCode {value: mix::op_codes::JANZ, default_fs: 4});
    m.insert("JANP", OpCode {value: mix::op_codes::JANP, default_fs: 5});
    m.insert("J1N", OpCode  {value: mix::op_codes::J1N, default_fs: 0});
    m.insert("J1Z", OpCode  {value: mix::op_codes::J1Z, default_fs: 1});
    m.insert("J1P", OpCode  {value: mix::op_codes::J1P, default_fs: 2});
    m.insert("J1NN", OpCode {value: mix::op_codes::J1NN, default_fs: 3});
    m.insert("J1NZ", OpCode {value: mix::op_codes::J1NZ, default_fs: 4});
    m.insert("J1NP", OpCode {value: mix::op_codes::J1NP, default_fs: 5});
    m.insert("J2N", OpCode  {value: mix::op_codes::J2N, default_fs: 0});
    m.insert("J2Z", OpCode  {value: mix::op_codes::J2Z, default_fs: 1});
    m.insert("J2P", OpCode  {value: mix::op_codes::J2P, default_fs: 2});
    m.insert("J2NN", OpCode {value: mix::op_codes::J2NN, default_fs: 3});
    m.insert("J2NZ", OpCode {value: mix::op_codes::J2NZ, default_fs: 4});
    m.insert("J2NP", OpCode {value: mix::op_codes::J2NP, default_fs: 5});
    m.insert("J3N", OpCode  {value: mix::op_codes::J3N, default_fs: 0});
    m.insert("J3Z", OpCode  {value: mix::op_codes::J3Z, default_fs: 1});
    m.insert("J3P", OpCode  {value: mix::op_codes::J3P, default_fs: 2});
    m.insert("J3NN", OpCode {value: mix::op_codes::J3NN, default_fs: 3});
    m.insert("J3NZ", OpCode {value: mix::op_codes::J3NZ, default_fs: 4});
    m.insert("J3NP", OpCode {value: mix::op_codes::J3NP, default_fs: 5});
    m.insert("J4N", OpCode  {value: mix::op_codes::J4N, default_fs: 0});
    m.insert("J4Z", OpCode  {value: mix::op_codes::J4Z, default_fs: 1});
    m.insert("J4P", OpCode  {value: mix::op_codes::J4P, default_fs: 2});
    m.insert("J4NN", OpCode {value: mix::op_codes::J4NN, default_fs: 3});
    m.insert("J4NZ", OpCode {value: mix::op_codes::J4NZ, default_fs: 4});
    m.insert("J4NP", OpCode {value: mix::op_codes::J4NP, default_fs: 5});
    m.insert("J5N", OpCode  {value: mix::op_codes::J5N, default_fs: 0});
    m.insert("J5Z", OpCode  {value: mix::op_codes::J5Z, default_fs: 1});
    m.insert("J5P", OpCode  {value: mix::op_codes::J5P, default_fs: 2});
    m.insert("J5NN", OpCode {value: mix::op_codes::J5NN, default_fs: 3});
    m.insert("J5NZ", OpCode {value: mix::op_codes::J5NZ, default_fs: 4});
    m.insert("J5NP", OpCode {value: mix::op_codes::J5NP, default_fs: 5});
    m.insert("J6N", OpCode  {value: mix::op_codes::J6N, default_fs: 0});
    m.insert("J6Z", OpCode  {value: mix::op_codes::J6Z, default_fs: 1});
    m.insert("J6P", OpCode  {value: mix::op_codes::J6P, default_fs: 2});
    m.insert("J6NN", OpCode {value: mix::op_codes::J6NN, default_fs: 3});
    m.insert("J6NZ", OpCode {value: mix::op_codes::J6NZ, default_fs: 4});
    m.insert("J6NP", OpCode {value: mix::op_codes::J6NP, default_fs: 5});
    m.insert("JXN", OpCode  {value: mix::op_codes::JXN, default_fs: 0});
    m.insert("JXZ", OpCode  {value: mix::op_codes::JXZ, default_fs: 1});
    m.insert("JXP", OpCode  {value: mix::op_codes::JXP, default_fs: 2});
    m.insert("JXNN", OpCode {value: mix::op_codes::JXNN, default_fs: 3});
    m.insert("JXNZ", OpCode {value: mix::op_codes::JXNZ, default_fs: 4});
    m.insert("JXNP", OpCode {value: mix::op_codes::JXNP, default_fs: 5});
    m.insert("INCA", OpCode {value: mix::op_codes::INCA, default_fs: 0});
    m.insert("DECA", OpCode {value: mix::op_codes::DECA, default_fs: 1});
    m.insert("ENTA", OpCode {value: mix::op_codes::ENTA, default_fs: 2});
    m.insert("ENNA", OpCode {value: mix::op_codes::ENNA, default_fs: 3});
    m.insert("INC1", OpCode {value: mix::op_codes::INC1, default_fs: 0});
    m.insert("DEC1", OpCode {value: mix::op_codes::DEC1, default_fs: 1});
    m.insert("ENT1", OpCode {value: mix::op_codes::ENT1, default_fs: 2});
    m.insert("ENN1", OpCode {value: mix::op_codes::ENN1, default_fs: 3});
    m.insert("INC2", OpCode {value: mix::op_codes::INC2, default_fs: 0});
    m.insert("DEC2", OpCode {value: mix::op_codes::DEC2, default_fs: 1});
    m.insert("ENT2", OpCode {value: mix::op_codes::ENT2, default_fs: 2});
    m.insert("ENN2", OpCode {value: mix::op_codes::ENN2, default_fs: 3});
    m.insert("INC3", OpCode {value: mix::op_codes::INC3, default_fs: 0});
    m.insert("DEC3", OpCode {value: mix::op_codes::DEC3, default_fs: 1});
    m.insert("ENT3", OpCode {value: mix::op_codes::ENT3, default_fs: 2});
    m.insert("ENN3", OpCode {value: mix::op_codes::ENN3, default_fs: 3});
    m.insert("INC4", OpCode {value: mix::op_codes::INC4, default_fs: 0});
    m.insert("DEC4", OpCode {value: mix::op_codes::DEC4, default_fs: 1});
    m.insert("ENT4", OpCode {value: mix::op_codes::ENT4, default_fs: 2});
    m.insert("ENN4", OpCode {value: mix::op_codes::ENN4, default_fs: 3});
    m.insert("INC5", OpCode {value: mix::op_codes::INC5, default_fs: 0});
    m.insert("DEC5", OpCode {value: mix::op_codes::DEC5, default_fs: 1});
    m.insert("ENT5", OpCode {value: mix::op_codes::ENT5, default_fs: 2});
    m.insert("ENN5", OpCode {value: mix::op_codes::ENN5, default_fs: 3});
    m.insert("INC6", OpCode {value: mix::op_codes::INC6, default_fs: 0});
    m.insert("DEC6", OpCode {value: mix::op_codes::DEC6, default_fs: 1});
    m.insert("ENT6", OpCode {value: mix::op_codes::ENT6, default_fs: 2});
    m.insert("ENN6", OpCode {value: mix::op_codes::ENN6, default_fs: 3});
    m.insert("INCX", OpCode {value: mix::op_codes::INCX, default_fs: 0});
    m.insert("DECX", OpCode {value: mix::op_codes::DECX, default_fs: 1});
    m.insert("ENTX", OpCode {value: mix::op_codes::ENTX, default_fs: 2});
    m.insert("ENNX", OpCode {value: mix::op_codes::ENNX, default_fs: 3});
    m.insert("CMPA", OpCode {value: mix::op_codes::CMPA, default_fs: 5});
    m.insert("CMP1", OpCode {value: mix::op_codes::CMP1, default_fs: 5});
    m.insert("CMP2", OpCode {value: mix::op_codes::CMP2, default_fs: 5});
    m.insert("CMP3", OpCode {value: mix::op_codes::CMP3, default_fs: 5});
    m.insert("CMP4", OpCode {value: mix::op_codes::CMP4, default_fs: 5});
    m.insert("CMP5", OpCode {value: mix::op_codes::CMP5, default_fs: 5});
    m.insert("CMP6", OpCode {value: mix::op_codes::CMP6, default_fs: 5});
    m.insert("CMPX", OpCode {value: mix::op_codes::CMPX, default_fs: 5});
    m
  };
}
